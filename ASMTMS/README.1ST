------------------------------------------------------------------------------
TMS320C1x/C2x/C2xx/C5x Code Generation Toolset Version 6.60
------------------------------------------------------------------------------

This file documents changes to the toolset which occurred after the
accompanying documentation was printed.

------------------------------------------------------------------------------
Hex Utility Change - Motorola Format
------------------------------------------------------------------------------

The hex utility formerly used only these S-record types:

        Record Type     Description
        -----------     -----------
             S1         Code/data record - 2-byte addresses
             S9         Termination record - 2-byte addresses

These record types only support 2-byte, or 16-bit, addresses.  To support
specifying the page which corresponds to the address, the hex utility now
uses the 3-byte S-record types:

        Record Type     Description
        -----------     -----------
             S2         Code/data record - 3-byte addresses
             S8         Termination record - 3-byte addresses

------------------------------------------------------------------------------
Interrupt Routines - Context Save/Restore
------------------------------------------------------------------------------

Compiler generated interrupt routines call the functions I$$SAVE and
I$$RESTORE to preserve the entire C environment which may be changed by
the interrupt.

These routines did not modify the status registers to insure the status
bit settings the compiler depends on are correct.  This could have caused
problems when interrupting user assembly code which modifies those status
bits.  The routines now save off the status registers and then modify the
status registers the same as in the boot routine "_c_int0".

------------------------------------------------------------------------------
Modify "rts.src" When Making Changes to RTS
------------------------------------------------------------------------------

Several places in the documentation mention changes you may make in the
runtime-support routines.  The procedures documented do not indicate how
to insure the source modification made is also reflected in the source
library "rts.src".  After making any modification to a RTS routine, in
addition to installing the change in the proper object library, install
the change in the source library ...

        dspar -r rts.src <modified file>

------------------------------------------------------------------------------
Corrections the Assembly Language Tools User's Guide
------------------------------------------------------------------------------

- On page 11-20, another initialized section generated by the compiler is
  .switch

- On page 11-29, "c_int00" should be spelled "c_int0".

- On page 11-40, the example shown, while correct, is not how the hex
  utility actually outputs Intel format.  Here is a representative example:

:2000000000000100020003000400050006000700080009000A000B000C000D000E000F0068
:2000200010001100120013001400150016001700180019001A001B001C001D001E001F0048
:2000400000000100020003000400050006000700080009000A000B000C000D000E000F0028
:2000600010001100120013001400150016001700180019001A001B001C001D001E001F0008
:00000001FF

- On page B-10, the definition of "size" should read "the number of *bits*
  required to contain this variable."

------------------------------------------------------------------------------
Corrections to the Compiler User's Guide
------------------------------------------------------------------------------

- The example on page 5-3 incorrectly uses the option "-mf".  The compiler
  toolset, including the library build utility, does not support an option
  to optimize for speed over space.  There is an option "-ms" which directs
  the compiler to optimizer for space over speed.

------------------------------------------------------------------------------
Corrections to the Getting Started Guide
------------------------------------------------------------------------------

- On page 1-9, the recommended setting for DOS4GVM should have

        set DOS4GVM = deleteswap swapmem#8192 swapname#c:\swap.tmp

  "swapmem" replaces "maxmem".

- The documentation does not mention that MAXMEM cannot exceed the amount
  of RAM available in your system.  As reported in the DOS command "mem /c",
  in the section Available Memory, the line Extended Memory (XMS), under
  the column Free,  this number must be greater than the value for MAXMEM.
  With the default value for MAXMEM of 4096K, the "mem /c" number needs to
  be greater than 4,500,000.
