;&D
*****************************************************************************
*       Обработка ADC
* $Id: BPADCPRO.ASM,v 1.12 2001-10-22 13:38:11 peter Exp $
****************************************************************************
*       Вся шкала АЦП(0-4,8В) соответствует 320 мм.рт.ст.
*       320*1.6=512; 512*(1-1/4-1/8)=512*0.625=320
*       Pmm=P-0.25*P-0.125*P - Формула преобразования значений давления
*                              в мм.рт.ст.
*       Начальное смещение на входе АЦП <=200мВ (номинал 150мВ),
*       что соответствует 0555h (номинал 0400h)
****************************************************************************
*
FILTER  MAC  	CF30,*-            ;КИХ-фильтр 16-го порядка
	LACC 	#0
	RPT  	#14
	MACD 	CF30+1,*-
	APAC
	SACH 	_OUTF,0
	RET

*              ;Коэфициенты фильтра Fs=30Гц.
CF30    .word	348,  1007,428,-1205,-2159,389,6235,11335
	.word   11335,6235,389,-2159,-1205,428,1007,348
Const1  .word   07B32h  ;(32768*k1/(1+k1))
Const2  .word   004FEh 	; 1/k1=(3.9/100)*32768

;	.globl	_clk_xf
* выдача тактовой частоты для SSP
CLKXF:
;_clk_xf:
	mImp_ssp   ;1
	mImp_ssp   ;2
	mImp_ssp   ;3
	mImp_ssp   ;4
	mImp_ssp   ;5
	mImp_ssp   ;6
	mImp_ssp   ;7
	mImp_ssp   ;8
	mImp_ssp   ;9
	mImp_ssp   ;10
	mImp_ssp   ;11
	mImp_ssp   ;12
	mImp_ssp   ;13
	mImp_ssp   ;14
	mImp_ssp   ;15
	mImp_ssp   ;16
	RET
;	.globl	_three_imp_ssp
;_three_imp_ssp:
;	mImp_ssp              ;подгоняем SSP к началу передачи MSB
;	mImp_ssp
;	mImp_ssp
;	RET

mDelayConver	.macro
	RPT  	#30             ;задержка для A/D conversion
	NOP                     ;(N+2)*1542.5347(2)~~50mks
 .endm

* запись     	чтение

* 1.AIN0 (PL0)	мусор
* 2.AIN1 (PL1)  AIN0 (PL0)
* 3.AIN2 (PL2)  AIN1 (PL1)
* 4.AIN3 (PL3)  AIN2 (PL2)
* 5.AIN4 (PL4)  AIN3 (PL3)
* 6.AIN5 (PL5)  AIN4 (PL4)
* 7.AIN6 (PR0)  AIN5 (PL5)
* 8.AIN7 (PR1)  AIN6 (PR0)
* 9.AIN8 (DAC)  AIN7 (PR1)
*10.AIN9 (PR3)  AIN8 (DAC)
*11.AIN10(VREF) AIN9 (PR3)-теперь второй канал(аварийный)
*12.Vref-       AIN10(VREF)
*13.Vref+    	Vref-
*14.PowerDown  	Vref+
*15.ЦАП      	результат PowerDown

ADCTABLE
 .word 04D00h	; 1.AIN4 (PL4) ,16 bit,MSB first,bipolar
 .word 05D00h	; 2.AIN5 (PL5) ,16 bit,MSB first,bipolar
 .word 06D00h	; 3.AIN6 (PR0) ,16 bit,MSB first,bipolar
 .word 07D00h	; 4.AIN7 (PR1) ,16 bit,MSB first,bipolar
 .word 08D00h	; 5.AIN8 (DAC) ,16 bit,MSB first,bipolar
 .word 09D00h	; 6.AIN9 (PR3) ,16 bit,MSB first,bipolar
 .word 0AD00h	; 7.AIN10(VREF),16 bit,MSB first,bipolar
 .word 0CC00h	; 8.Vref-      ,16 bit,MSB first,bipolar
 .word 0DC00h	; 9.Vref+      ,16 bit,MSB first,bipolar
 .word 0EC00h	;10.software power down

ADCPRO
	MAR     *,AR1
	POPD	*+
	SAR     AR7,*+
	SAR     AR6,*+

	SPM  	#1              ;Set P Register Output Shift Mode
				;multiplier output is left-shifted one place

	SPLK 	#SSPS,*		;SSP start
	OUT  	*,SSPCR		;Synchronous Serial Port Control Register

	IN   	*,SDTR     	;команда лишнего чтения(!??)
				;для стабильности(надежности) работы с SSP
***************************************************
* начинаем записывать данные в fifo SSP
***************************************************
	SPLK 	#00D00h,*  	;AIN0(PL0),16 bit,MSB first,bipolar
	OUT  	*,SDTR     	;1.первое слово для передачи(PL0)

	SPLK 	#01D00h,*  	;AIN1(PL1),16 bit,MSB first,bipolar
	OUT  	*,SDTR     	;2.второе слово для передачи(PL1)

	mImp_ssp              	;подгоняем SSP к началу передачи MSB
	mImp_ssp
	mImp_ssp

	mOnADC			;включаем выборку АЦП
	mOutDIOSR		;записываем выборку устройств в регистр вывода

	SPLK 	#02D00h,*  	;AIN2(PL2),16 bit,MSB first,bipolar
	OUT  	*,SDTR     	;3.третье слово для передачи(PL2)

	CALL 	CLKXF		;1-передаем первое слово в АЦП
	IN	*,SDTR		;(1)чтение первого результата (мусор)


	LAR	AR6,#10		;11 циклов
	LAR	AR7,#_ResultADC	;здесь будем запоминать результаты
*******************
* в таблице ADCTABLE записаны значения
* которые будут передаваться в АЦП
********************
	LACC 	#ADCTABLE

	SPLK 	#03D00h,*  	;AIN3(PL3),16 bit,MSB first,bipolar
ReadNextInput

	OUT  	*,SDTR    	;4.(четвертое+0..N) слово для передачи(AIN3..(3+0..N))
	TBLR 	*,AR7

	mDelayConver		;пауза для преобразования ADC
	CALL 	CLKXF		;2-передаем второе+0..N слово в АЦП
	IN	*+,SDTR,AR6	;(1)чтение второго+0..N результата (AIN0..(0..N))
	ADD	#1

	BANZ	ReadNextInput,*-,AR1

*************************************************
* для новой платы данные идут с инверсией
* здесь будет жить дополнительный цикл инверсии данных
 .if NewFerrum=1

	LAR	AR6,#10		;11 циклов
	LAR	AR7,#_ResultADC	;здесь будем запоминать результаты
	MAR	*,AR7
InverseNextInput
	LACC	#0FFFFh
	XOR	*
	SACL	*+,0,AR6

	BANZ	InverseNextInput,*-,AR7
 .endif
* конец цикла инверсии данных для новой платы
*************************************************

*****************************************************
* при подстройке ЦАП на предыдущем цикле
* значение на выходе ЦАПа(AIN8) теперь будет использоваться
* в новых расчетах

	BIT  	_Jobs,10   	;записать значение ЦАП в ячейку для обсчета?
	BCND 	NotWriteFromDAC,NTC
	ClearReadDAC
	MAR	*,AR6
	LAR	AR6,#_ResultADC+8	;AIN8 (значение на выходе ЦАП)
	LACC 	*
	ADD  	#Ppa1_prog,0   	;DAC1n+Ppa1_prog
	SACL 	DAC2
NotWriteFromDAC
*******************************************
;k1=100/3.9 коэффициент усиления операционного усилителя
;Ppa1_prog=160/k1=32768/k1 - половина значения шкалы (5мм рт.ст.)
;                            после усилителя
;Pr2n=(DAC1n+Ppa1_prog)*(k1/(1+k1))+Ppa1n/k1-Ppa1_prog
;полное значение (16 разрядов) сигнала, где
; DAC1n - значение на выходе ЦАП
; Ppa1n - значение на выходе усилителя
;
	MAR     *,AR6
	LAR	AR6,#_ResultADC+7;AIN7(PR1)

	MAC  	Const1,DAC2 	;Const1* DAC2= "(32768*k1/(1+k1))"*
				;* "(значение на выходе ЦАП+Ppa1_prog)"->P
	LACC 	#0
	MAC  	Const2,* 	;Const2*(PR1)= "1/k1(=3.9/100)*32768"*
				;*(значение усиленного канала)
	APAC
	SUB 	#Ppa1_progMul2,15 ;на 16 сдвигать нельзя
	LAR  	AR6,#SR30  	;Адреса начала сдвиг.рег.ФНЧ
	SACH 	*
	LAR  	AR6,#SR30+15    ;Адреса конца сдвиг.рег.ФНЧ
	CALL 	FILTER          ;FILTER


***********************************************
* вычисляем давление с учетом смещения
	SETC 	SXM
	MAR	*,AR6
	LAR	AR6,#_ResultADC+6;AIN6 (PR0) значение на выходе датчика
	LACC    *
	ADD  	#4000h,1
	AND  	#0FFFFh
	SUB  	Preset0
	BCND 	No_minus,GEQ
	LACC 	#0
No_minus
	SACL 	CurrPressure

***********************************************
* в переменной DAC находится значение для вывода в ЦАП
* время от времени :) значение ЦАП надо подстраивать
* сейчас ЦАП подстраивается так, чтобы выходной сигнал
* с дополнительного усилителя попал в "середину"
* делается двумя путями
* 1. принудительно установлен бит подстройки ЦАП
* 2. значение сигнала с дополнительного усилителя
*    подошло к границе (следует учитывать, что на операционных
*    усилителях различное выходное напряжение(max))

	BIT  	_Jobs,12		;будем подгонять ЦАП ?
************
* данный бит устанавливается для принудительной
* подстройке ЦАП.
* для экономии управляющих битов, он также используется
* как признак записывания в ЦАП значения
* Если данный бит будет установлен (принудительно или в
* процессе вычислений) то выборка ЦАПа, при засылки в него
* данных, будет включена. В противном случае (чтобы не
* нарушать алгоритм работы с SSP) выборка ЦАП на время
* "передачи"  значения в него будет отключена

	BCND 	DACC,TC    	; будем обязательно

	MAR	*,AR6
	LAR	AR6,#_ResultADC+7;AIN7(PR1) значение на выходе усилителя

	LACC 	*
	ADD  	#4000h,1
	SUB  	#0800h
	BCND 	DACC,LEQ
	SUB  	#0D0h,8
	BCND 	EndComputeDAC,LEQ
DACC
	SendToDAC

*	LACC 	_Jobs
*	OR   	#10h     	;надо загнать в ЦАП значение,и
				;установить сброс значения в канал
*	SACL 	_Jobs     	;устанавливаем флаг сброса значения ЦАП в канал

*******************************
;то, что нужно загонять в ЦАП
;Ppa0n/k1+Ppa0n-Ppa1_prog
;k1=100/3.9, 1/k1=0.039~~ 1/32+1/128=0.03906
; Ppa0n - выход с прямого канала
*******************************
	SETC 	SXM

	MAR	*,AR6
	LAR	AR6,#_ResultADC+6;AIN6 (PR0) значение на выходе датчика

*****************************
* чтобы не "переклинить" с вычислениями
* в этом месте вычисляется пороговое значение
* в данный момент неработающее
	LACC	*,16
*	SUB	#1333*2,15    	;(-32768-x)-(-32768-x)*0.03906=-32768
				;чтобы не было переполнения ЦАП
				;не загонишь ниже нуля

*	BCND    VisheChemPorog,NOV	; переполнения небыло
*	LACC 	#0
*	B	DostigliKrishi
VisheChemPorog
*****************************
* вычисляем по формуле значение для загонки в ЦАП
*****************************
	LACC 	*,10
	ADD  	*,5   		;+Ppa0n*(1/32)
	ADD  	*,3		;+Ppa0n*(1/128)
	ADD  	#4000h,11
	SUB  	#Ppa1_prog,10
	SACH 	DAC,2
	LACC 	#0FFCh,0
	AND  	DAC
DostigliKrishi
	SACL 	DAC		;в этой ячейке находится значение
				;которое необходимо передать в ЦАП
EndComputeDAC
* конец вычислений значения ЦАП
*********************************************

*********************************************
* записываем в fifo слово для передачи в ЦАП
* но это еще не значит, что оно в него запишется
* выборка ЦАП активизируется только в случае
* если на то было разрешение "высших сил"
* (было вычисление подстройки ЦАП)
*********************************************
	OUT  	DAC,SDTR

****************************************
* т.к. перед этим было вычисление значение сигнала (FILTER)
* это должно с лихвой окупить ту паузу, которая здесь убрана
* но необходимо учитывать при следующих модификациях кода
*	mDelayConver		;пауза для преобразования ADC
****************************************
	CALL 	CLKXF		;13 вызов (передаем команду Vref+)
	MAR	*,AR7
	IN	*+,SDTR		;Vref-

	mDelayConver		;пауза для преобразования ADC
	CALL 	CLKXF		;14 вызов (передаем команду PowerDown)
	MAR	*,AR7
	IN	*+,SDTR,AR1	;Vref+
*********
* работа с АЦП закончена, аллах тут ни при чем...

	mOffPeriph   		;выключаем всю периферию
	mOutDIOSR		;записываем выборку устройств в регистр вывода

********
* наступила очередь передавать команду для ЦАП
* to be or not to be, вот в чем вопрос
* чтение результата с SSP при передаче команды
* не существенно (хотя для SSP желательно, чтобы
* данные не путались в fifo) т.к. это значение работы
* команды Power Down для АЦП


	BIT  	_Jobs,12    	;будем подгонять ЦАП ?
	BCND 	NotDAC,NTC 	;в ЦАП не надо загонять

	mOnDAC			;включаем выборку ЦАП
	mOutDIOSR		;записываем выборку устройств в регистр вывода
	ClearSendToDAC		;ЦАП подстроили, сбросим флаг
	ReadDAC			;на следующем круге надо считать
				;значение на выходе ЦАП
NotDAC
*************************************************

*****
* пауза перед передачей уже не нужна
*****
	CALL 	CLKXF		;15-й вызов (передаем значение ЦАП)
	IN	*,SDTR		;результат команды Power Down

************
* работа процедуры закончена, до свидания, товарищи
	mOffPeriph   		;выключаем всю периферию
	mOutDIOSR		;записываем выборку устройств в регистр вывода

	MAR	*,AR1
	MAR	*-,AR1
	LAR     AR6,*-
	LAR     AR7,*-
	PSHD	*

	RET
